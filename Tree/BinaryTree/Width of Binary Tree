/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        unsigned long long ans = 0;
        queue<pair<TreeNode*, unsigned long long>> qt;
        if(root == nullptr) return 0;

        qt.push({root,0});
        while(!qt.empty()){
            int size = qt.size();
            unsigned long long startIndex = qt.front().second;
            unsigned long long lastIndex = qt.back().second;

            ans = max(ans,lastIndex - startIndex +1);

            for(int i = 0; i<size; i++){
                auto p = qt.front();
                TreeNode* node = p.first;
                qt.pop();

                unsigned long long currIndex = p.second - startIndex;

                if(node->left != nullptr) qt.push({node->left, 2*currIndex+1});
                if(node->right != nullptr) qt.push({node->right, 2*currIndex+2});
            }
        }
        return ans;
    }
};
