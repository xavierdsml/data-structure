class Solution {
public:
    bool solve(vector<vector<char>>& board){

        for(int row = 0; row<board.size(); row++){
            for(int col = 0; col<board.size(); col++){
                
                if(board[row][col] == '.'){ //check for the empty character in suduko
                    for(char c ='1'; c<='9'; c++){
                        if(possibleToStore(row, col, c, board)){
                            board[row][col] = c;
                            if(solve(board)==true){
                                return true;
                            }
                            else board[row][col] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

 public:
    bool possibleToStore(int row, int col, char c, vector<vector<char>>&board){
        for(int i = 0; i<9; i++){

            if(board[i][col] == c || board[row][i] == c) return false;

            //check for the sub 3*3
            if(board[3* (row/3) + i/3][3 * (col/3) + i%3] == c) return false;
        }
        return true;
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};

//if you want to incerease your runtime add this line
//auto init = atexit([]() { ofstream("display_runtime.txt") << "0";});
