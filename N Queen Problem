class Solution {
public:
    void solve(int col, vector<string>&board, vector<vector<string>>&ans, int n){
        //base condition 
        if(col == n){
            ans.push_back(board);
        }

        for(int row = 0; row<n; row++){
            if(possible(row, col, board, n)){
                board[row][col] = 'Q';
                solve(col+1, board, ans, n);
                board[row][col] = '.';
            }
        }
    }
 public:
    bool possible(int row, int col, vector<string>&board, int n){
        int dupR = row;
        int dupC = col;

        //upper diagonally 
        while(row>=0 && col>=0){
            if(board[row][col] == 'Q') return false;
            row--; col--;
        }

        //leftRow 
        row = dupR;
        col = dupC;
        while(col>=0){
            if(board[row][col]=='Q') return false;
            col--;
        }

        //lower diagonally
        row = dupR;
        col = dupC;
        while(row<n && col>=0){
            if(board[row][col] == 'Q') return false;
            row++; col--;
        }

        return true;
    }
 public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n);
        string s(n, '.');
        for(int i = 0; i<n; i++){
            board[i] = s;
        }
        solve(0, board, ans, n);
        return ans;
    }
};
